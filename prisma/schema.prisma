// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    CategoriesOnUsers[]
  ShoppingList  ShoppingList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id           String   @id @default(cuid())
  name         String   @unique
  note         String?
  imageUrl     String?
  category     Category @relation(fields: [categoryId, categoryName], references: [id, name])
  categoryId   String
  categoryName String
}

model Category {
  id    String              @id @default(cuid())
  name  String              @unique
  item  Item[]
  users CategoriesOnUsers[]

  @@unique([id, name])
}

model CategoriesOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([userId, categoryId])
}

model ShoppingItem {
  id             String       @id @default(cuid())
  itemName       String
  categoryName   String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  shoppingListId String
  itemCount      Int
  checked        Boolean      @default(false)
}

enum ListStatus {
  canceled
  active
  completed
}

model ShoppingList {
  id            String         @id @default(cuid())
  name          String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  shoppingItems ShoppingItem[]
  listStatus    ListStatus     @default(active)
}
